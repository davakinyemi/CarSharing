package archive.main.auth;

import archive.main.app.App;
import archive.main.auth.beta.actioncode.ActionCodeResult;
import archive.main.auth.beta.idtoken.IdTokenListener;
import archive.main.auth.listener.AuthStateListener;
import archive.main.entity.beta.appentity.AppEntity;
import archive.main.entity.user.UserEntity;
import archive.main.exception.authexception.*;
import archive.main.job.Job;

public abstract class AppAuth {
    // register a listener to changes in super archive.main.entity (user/admin/vehicle via admin) archive.main.auth state
    // there can be more than one listener registered at the same time for one or more archive.main.auth instances
    // listeners call back in the implementation thread on the following events:
    // right after listener is registered
    // when archive.main.entity signs in
    // when current archive.main.entity signs out
    // when current archive.main.entity changes
    public abstract void addAuthStateListener(AuthStateListener listener);


    public abstract void removeAuthStateListener(AuthStateListener listener);

    // registers a listener to changes in id token archive.main.auth state
    // there can be more than one listener registered at the same time for one or more archive.main.auth instances
    // listeners call back in implementation thread on the following events:
    // right after listener is registered
    // when a super archive.main.entity signs in
    // when current archive.main.entity signs out
    // when current archive.main.entity changes
    public abstract void addIdTokenListener(IdTokenListener listener);

    public abstract void removeIdTokenListener(IdTokenListener listener);

    // applies the given code (any valid out of band code)
    public abstract Job<Void> applyAccessCode(String code);

    // checks that code given is valid.
    // Code is generated by sendPasswordResetEmail(String) or UserEntity.sendEmailVerification
    // Code is valid fora single use
    // returns Job of AccessCodeReport which can be used to see the result via the AccessCodeResult
    // AccessCodeResult hold user email for which AccessCode is valid, as well as the AccessCodeOperation which is being performed
    public abstract Job<ActionCodeResult> checkAccessCode(String code);

    // changes the archive.main.entity's password to newPassword for the account for which the code is valid.
    // code validity is checked with verifyPasswordResetCode(String)
    // use case is only valid for signed-out entities and undefined for signed-in entities.
    // password changes for signed-in entities is made using UserEntity.updatePassword(String)
    // IllegalArgumentException thrown if pass null code or newPassword
    // AuthAccessCodeException thrown if code is malformed or expired
    // AuthInvalidEntityException thrown if user corresponding to given code has been disabled, or if there is no user corresponding to given code
    public abstract Job<Void> confirmPasswordReset(String code, String newPassword) throws IllegalArgumentException, AuthActionCodeException, AuthInvalidUserException, AuthWeakPasswordException;

    // tries to create new user account with given email and password
    // if successful, user is also signed into archive.main.app
    // signed-in user accessed with getCurrentUser()
    // upon successful completion, Auth.IdTokenListener.onIdTokenChanged(Auth) event is triggered in all registered IdTokenListeners
    // Auth.AuthStateListener.onAuthStateChanged(Auth) event is triggered in all registered AuthStateListeners
    // AuthWeakPasswordException is thrown if password is not strong enough
    // AuthInvalidCredentialException is thrown if email address is malformed
    // AuthEntityCollisionException is thrown if there already exists an account with the given email address
    // return Job of AuthReport with result of operation
    public abstract Job<AppAuthResult> createUserEntity(String email, String password) throws AuthWeakPasswordException, AuthInvalidCredentialException, AuthUserCollisionException;

    // return the archive.main.app instance to which this archive.main.auth belongs
    public abstract App getApp();

    // returns the current signed-in UserEntity or null if there is none
    public abstract UserEntity getCurrentUserEntity();

    // returns an instance of this class corresponding to the default archive.main.app instance
    public static AppAuth getInstance(){
        return null;
    }

    // triggers the authentication backend to send a password-reset email to the given email address, which must correspond to the an existing user of the archive.main.app
    public abstract Job<Void> sendPasswordResetEmail(String email);

    //public Job<Void> sendSignInLinkToEmail(String email){ return null; }

    //public boolean isSIgnInWithEmailLink(String link){ return false; }

    // tries to sign in a user with the given email address and password
    // access the signed-in user with getCurrentUser()
    // upon successful completion, trigger an IdTokenListener.onIdTokenChanged(Auth) event in all registered IdTokenListeners
    // and AuthStateListener.onAuthStateChanged(Auth) event in all registered AuthStateListeners
    // throws InvalidEntityException if user account corresponding to email does not exist or has been disabled
    // throws InvalidCredentialException if the password is wrong
    // return a Job of AuthResult with result of operation
    public abstract Job<AppAuthResult> signInWithEmailAndPassword(String email, String password) throws AuthInvalidUserException, AuthInvalidCredentialException;

    // Tries to sign in a user with the given AuthCredential (phone or email)
    // For all AuthCredential types except EmailAuthCredential, this method will create an account for the user in the case that it didn't exist before.
    // beta feature
    /*public Job<AppAuthResult> signInWithCredential(AuthCredential credential) throws AuthInvalidUserException, AuthInvalidCredentialException, AuthUserCollisionException {
        return null;
    }*/

    // signs out current archive.main.entity and clears it from non-persistent storage (disk cache)
    // upon success, operation triggers onIdTokenChanged(Auth) event in all registered IdTokenListeners
    // and onAuthStateChanged(Auth) in all registered AuthStateListeners
    public abstract void signOut();

    // sets the current user to a copy of the given archive.main.entity, but associated with this Auth's archive.main.app.
    // if given user isn't valid, the an invalid user archive.main.exception is returned via Job
    public abstract Job<Void> updateCurrentUserEntity(AppEntity entity);

    // checks that code is a valid password reset out of band code
    // code is generated by a call to sendPasswordResetEmail(String) and is valid for a single use
    // return a Job which holds email for which code is applicable
    public abstract Job<String> verifyPasswordResetCode(String code);
}
